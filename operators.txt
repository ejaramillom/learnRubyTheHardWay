Method	Operator	Description
Yes	::	Constant resolution operator
Yes	[ ] [ ]=	Element reference, element set
Yes	**	Exponentiation (raise to the power)
Yes	! ~ + -	Not, complement, unary plus and minus (method names for the last two are +@ and -@)
Yes	* / %	Multiply, divide, and modulo
Yes	+ -	Addition and subtraction
Yes	>> <<	Right and left bitwise shift
Yes	&	Bitwise 'AND'
Yes	^ |	Bitwise exclusive `OR' and regular `OR'
Yes	<= < > >=	Comparison operators
Yes	<=> == === != =~ !~	Equality and pattern match operators (!= and !~ may not be defined as methods)
 	&&	Logical 'AND'
 	||	Logical 'OR'
 	.. ...	Range (inclusive and exclusive)
 	? :	Ternary if-then-else
 	= %= { /= -= += |= &= >>= <<= *= &&= ||= **=	Assignment
 	defined?	Check if specified symbol defined
 	not	Logical negation
 	or and	Logical composition

Abbreviated Assignment
You can mix several of the operators and assignment. To add 1 to an object you can write:

a = 1

a += 2

p a # prints 3
This is equivalent to:

a = 1

a = a + 2

p a # prints 3
You can use the following operators this way: +, -, *, /, %, **, &, |, ^, <<, >>

There are also ||= and &&=. The former makes an assignment if the value was nil or false while the latter makes an assignment if the value was not nil or false.

Here is an example:

a ||= 0
a &&= 1

p a # prints 1
Note that these two operators behave more like a || a = 0<code> than <code>a = a || 0.

